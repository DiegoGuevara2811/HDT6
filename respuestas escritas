**C√°lculo de Complejidad para la Operaci√≥n #4: Ordenar todos los Pok√©mon por Tipo1**

La operaci√≥n #4 requiere **ordenar y mostrar todos los Pok√©mon le√≠dos del archivo, ordenados por el campo Tipo1**. La complejidad depende de la implementaci√≥n de `Map` que el usuario seleccione.

### **¬†Complejidad de cada estructura de datos**

#### **Caso 1: HashMap (Opci√≥n 1 en el programa)**

- **B√∫squeda de todos los valores en el mapa** ‚Üí O(n) *(se obtienen los valores del HashMap)*.
- **Conversi√≥n a una lista** ‚Üí O(n) *(se copian los elementos a una lista para ordenarlos)*.
- **Ordenamiento con ****`Collections.sort()`** ‚Üí O(n log n).

üîπ **Complejidad total con HashMap:** **O(n log n)**

#### **Caso 2: TreeMap (Opci√≥n 2 en el programa)**

- `TreeMap` mantiene los elementos **ordenados por clave**, pero en este caso, la clave es el **nombre del Pok√©mon**, no su Tipo1.
- **Conversi√≥n a lista para reordenar por Tipo1** ‚Üí O(n).
- **Ordenamiento con ****`Collections.sort()`** ‚Üí O(n log n).

üîπ **Complejidad total con TreeMap:** **O(n log n)** *(igual a HashMap, pero con un peque√±o overhead debido a la estructura del √°rbol)*.



#### **Caso 3: LinkedHashMap (Opci√≥n 3 en el programa)**

- `LinkedHashMap` mantiene el orden de inserci√≥n, pero no permite ordenar directamente por Tipo1.
- **Conversi√≥n a lista** ‚Üí O(n).
- **Ordenamiento con ****`Collections.sort()`** ‚Üí O(n log n).

üîπ **Complejidad total con LinkedHashMap:** **O(n log n)** *(igual a los otros casos, ya que el ordenamiento es expl√≠cito).*


### **2. Elecci√≥n de la mejor estructura**

Como **todas las implementaciones de ****`Map`**** requieren ordenar manualmente la lista**, la complejidad final es siempre **O(n log n)**. Sin embargo:

- **`HashMap`**** es la opci√≥n m√°s eficiente en cuanto a almacenamiento y acceso**, ya que su b√∫squeda es O(1).
- \*\*`TreeMap` tiene sobrecarga en la inserci√≥n, pero podr√≠a ser √∫til si se necesitara ordenar constantemente por otra clave.
- **`LinkedHashMap`**** solo ayuda si el orden de inserci√≥n es relevante, lo cual no es el caso aqu√≠.**

üîπ **Conclusi√≥n:** Para esta operaci√≥n, cualquier `Map` tiene la misma complejidad O(n log n), pero `HashMap` es la opci√≥n m√°s eficiente para almacenamiento y recuperaci√≥n de datos.

